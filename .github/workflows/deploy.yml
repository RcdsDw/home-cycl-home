name: Deploy to VPS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Add SSH known hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" > ~/.ssh/known_hosts

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Create project directory and sync files
        run: |
          # Cr√©er le dossier de destination s'il n'existe pas
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "mkdir -p /home/${{ secrets.VPS_USER }}/home_cycl_home"
          
          # Synchroniser seulement dans le dossier du projet
          rsync -avz --delete \
            --exclude='.git/' \
            --exclude='node_modules/' \
            --exclude='*.log' \
            --exclude='.env' \
            --exclude='.env.local' \
            ./ ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/home/${{ secrets.VPS_USER }}/home_cycl_home/

      - name: Deploy to VPS
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            set -e  # Arr√™ter le script si une commande √©choue
            
            mkdir -p "/home/${{ secrets.VPS_USER }}/backups"
            cd /home/${{ secrets.VPS_USER }}/home_cycl_home
            
            echo "üîÑ D√©but du d√©ploiement..."
            
            # Backup de l'ancienne version
            BACKUP_NAME="backup_$(date +%Y%m%d_%H%M%S)"
            if [ -d "../backups/$BACKUP_NAME" ]; then
              rm -rf "../backups/$BACKUP_NAME"
            fi
            cp -r . "../backups/$BACKUP_NAME" || echo "‚ö†Ô∏è  Backup √©chou√©, mais on continue"
            
            # Arr√™t des services existants
            echo "üõë Arr√™t des containers Docker..."
            docker compose down || echo "Aucun container √† arr√™ter"
            
            # Lib√©ration du port si occup√©
            sudo fuser -k 82/tcp || true
            
            # Build avec timeout pour √©viter les blocages comme pr√©c√©demment
            echo "üê≥ Construction des containers..."
            if ! timeout 600 docker compose build --parallel; then
              echo "‚ö†Ô∏è Build timeout apr√®s 10min - tentative avec cache"
              docker compose up -d --remove-orphans || {
                echo "‚ùå √âchec total - restauration du backup si possible"
                exit 1
              }
            else
              echo "‚úÖ Build r√©ussi - d√©marrage des containers"
              docker compose up -d --remove-orphans
            fi
            
            # Attendre que les containers soient pr√™ts
            sleep 10
            
             # Installation des d√©pendances PHP (s√©curit√©)
            echo "üì¶ V√©rification des d√©pendances PHP..."
            docker compose exec -T backend composer install --no-interaction --optimize-autoloader

            # Lancer les migrations Doctrine
            echo "üì¶ Lancement des migrations Doctrine..."
            docker compose exec -T backend php bin/console doctrine:migrations:migrate --no-interaction
            
            if [ -d "home_cycl_home_front" ]; then
              echo "üé® D√©ploiement du front..."
              cd home_cycl_home_front
              
              # Installation des d√©pendances si package.json a chang√©
              if [ package.json -nt node_modules/.package-lock.json ] || [ ! -d node_modules ]; then
                echo "üì¶ Installation des d√©pendances..."
                timeout 300 npm install --omit=dev || {
                  echo "‚ùå Installation des d√©pendances √©chou√©e"
                }
              else
                echo "üì¶ D√©pendances d√©j√† √† jour"
              fi
              
              # Restart avec PM2
              if pm2 describe front > /dev/null 2>&1; then
                pm2 restart front
              else
                pm2 start npm --name front -- start
              fi
              
              cd ..
            fi
            
            echo "‚úÖ D√©ploiement termin√© avec succ√®s !"
          EOF