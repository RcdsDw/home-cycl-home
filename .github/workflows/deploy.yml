name: Deploy to VPS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Add SSH known hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" > ~/.ssh/known_hosts

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Create project directory and sync files
        run: |
          # Cr√©er le dossier de destination s'il n'existe pas
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "mkdir -p /home/${{ secrets.VPS_USER }}/home_cycl_home"
          
          # Synchroniser seulement dans le dossier du projet
          rsync -avz --delete \
            --exclude='.git/' \
            --exclude='node_modules/' \
            --exclude='*.log' \
            --exclude='.env' \
            --exclude='.env.local' \
            ./ ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/home/${{ secrets.VPS_USER }}/home_cycl_home/

      - name: Deploy to VPS
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            set -e  # Arr√™ter le script si une commande √©choue
            
            mkdir -p "/home/${{ secrets.VPS_USER }}/backups"
            cd /home/${{ secrets.VPS_USER }}/home_cycl_home
            
            echo "üîÑ D√©but du d√©ploiement..."
            
            # Backup de l'ancienne version
            if [ -d "../backups/backup_$(date +%Y%m%d)" ]; then
              rm -rf "../backups/backup_$(date +%Y%m%d)"
            fi
            cp -r . "../backups/backup_$(date +%Y%m%d)" || echo "‚ö†Ô∏è  Backup √©chou√©, mais on continue"
            
            # Arr√™t des services existants
            echo "üõë Arr√™t des containers Docker..."
            docker compose down || echo "Aucun container √† arr√™ter"
            
            # Lib√©ration du port si occup√©
            sudo fuser -k 82/tcp || true
            
            # Rebuild et lancement des containers
            echo "üê≥ Construction et lancement des containers..."
            docker compose up -d --build --remove-orphans
            
            # Attendre que les containers soient pr√™ts
            sleep 10
            
            # Lancer les migrations Doctrine
            echo "üì¶ Lancement des migrations Doctrine..."
            docker compose exec -T backend php bin/console doctrine:migrations:migrate --no-interaction

            # V√©rifier le statut Docker
            DOCKER_STATUS=$(docker compose ps --format "table {{.Service}}\t{{.Status}}" | tail -n +2)
            DOCKER_SUCCESS=true
            
            if ! docker compose ps | grep -q "Up"; then
              DOCKER_SUCCESS=false
              echo "‚ùå Erreur: Aucun container Docker n'est actif"
            fi
            
            # D√©ploiement du front (si pas dans Docker)
            FRONT_STATUS="Non d√©ploy√©"
            FRONT_SUCCESS=true
            
            if [ -d "home_cycl_home_front" ]; then
              echo "üé® D√©ploiement du front..."
              cd home_cycl_home_front
              
              # Installation des d√©pendances si package.json a chang√©
              if [ package.json -nt node_modules/.package-lock.json ] || [ ! -d node_modules ]; then
                echo "üì¶ Installation des d√©pendances..."
                timeout 300 npm install --omit=dev || {
                  echo "‚ùå Installation des d√©pendances √©chou√©e"
                  FRONT_SUCCESS=false
                  FRONT_STATUS="Erreur installation npm"
                }
              else
                echo "üì¶ D√©pendances d√©j√† √† jour"
              fi
              
              # Restart avec PM2
              if pm2 describe front > /dev/null 2>&1; then
                pm2 restart front
                FRONT_STATUS="Red√©marr√© avec PM2"
              else
                pm2 start npm --name front -- start
                FRONT_STATUS="D√©marr√© avec PM2"
              fi
              
              # V√©rifier que le processus PM2 fonctionne
              if ! pm2 describe front | grep -q "online"; then
                FRONT_SUCCESS=false
                FRONT_STATUS="Erreur PM2"
              fi
              
              cd ..
            fi
            
            # D√©terminer le statut global
            if [ "$DOCKER_SUCCESS" = true ] && [ "$FRONT_SUCCESS" = true ]; then
              DEPLOY_STATUS="‚úÖ Succ√®s"
              EMBED_COLOR=3066993
            else
              DEPLOY_STATUS="‚ùå √âchec partiel"
              EMBED_COLOR=15158332
            fi
            
            # Formatage du statut Docker pour Discord
            DOCKER_STATUS_FORMATTED=$(echo "$DOCKER_STATUS" | sed 's/$/\\n/g' | tr -d '\n')
            
            # Notification Discord
            curl -H "Content-Type: application/json" \
                -X POST \
                -d "{
                  \"content\": \"<@246753473587052555>\",
                  \"embeds\": [{
                    \"title\": \"üöÄ D√©ploiement termin√©\",
                    \"description\": \"**Statut global:** $DEPLOY_STATUS\\n\\n**Front:** $FRONT_STATUS\\n\\n**Docker:**\\n\`\`\`\\n$DOCKER_STATUS_FORMATTED\`\`\`\",
                    \"color\": $EMBED_COLOR,
                    \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
                    \"footer\": {
                      \"text\": \"D√©ploiement automatique\"
                    }
                  }]
                }" \
                ${{ secrets.DISCORD_WEBHOOK_URL }}
            
            echo "‚úÖ D√©ploiement termin√© !"
          EOF